package Latte.Absyn; // Java Package generated by the BNF Converter.

import Latte.Env;

import java.util.LinkedList;

public class Block {
    public final ListStmt liststmt_;

    public Block(ListStmt p1) { liststmt_ = p1; }

    public <R,A> R accept(Latte.Absyn.Block.Visitor<R,A> v, A arg) { return v.visit(this, arg); }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o instanceof Latte.Absyn.Block) {
            Latte.Absyn.Block x = (Latte.Absyn.Block)o;
            return this.liststmt_.equals(x.liststmt_);
        }
        return false;
    }

    public String toString() {
        String ret = "";
        for (Stmt s: liststmt_){
            ret += s + "; ";
        }
        return ret;
    }

    public int hashCode() {
        return this.liststmt_.hashCode();
    }

    public Boolean functionsReturnAchievibility() {
        for (Stmt s: liststmt_){
            if (s.functionsReturnAchievibility())
                return true;
        }
        return false;
    }

    public void checkTypes(LinkedList<Env> envs, String currentFunction) {
        Env env = envs.getLast();
        envs.add(Env.copyEnv(env, env.funName));
        for (Stmt s: liststmt_){
            s.checkTypes(envs, currentFunction);
        }
        envs.removeLast();
    }

    public interface Visitor <R,A> {
        public R visit(Latte.Absyn.Block p, A arg);

    }

}
