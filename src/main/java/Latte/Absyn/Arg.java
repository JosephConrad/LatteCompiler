package Latte.Absyn; // Java Package generated by the BNF Converter.

import Latte.Env;
import Latte.Exceptions.TypeException;

import java.util.LinkedList;

public class Arg {
    public final Type type_;
    public final String ident_;

    public Arg(Type p1, String p2) { type_ = p1; ident_ = p2; }

    public <R,A> R accept(Latte.Absyn.Arg.Visitor<R,A> v, A arg) { return v.visit(this, arg); }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o instanceof Latte.Absyn.Arg) {
            Latte.Absyn.Arg x = (Latte.Absyn.Arg)o;
            return this.type_.equals(x.type_) && this.ident_.equals(x.ident_);
        }
        return false;
    }

    public String toString() {
        return type_ + " " + ident_;
    }

    public int hashCode() {
        return 37*(this.type_.hashCode())+this.ident_.hashCode();
    }

    public void checkTypes(LinkedList<Env> envs, String functionIdent) throws TypeException {
        Env env = envs.getLast();
            if (env.argumentsShifts.containsKey(ident_))
                throw new TypeException("At function " + functionIdent +
                        ": Argument name " + ident_ + " is repeated in function signature.");

        env.argumentsShifts.put(ident_, 0);
        env.variableType.put(ident_, type_.toString());
    }

    public interface Visitor <R,A> {
        public R visit(Latte.Absyn.Arg p, A arg);

    }

}
