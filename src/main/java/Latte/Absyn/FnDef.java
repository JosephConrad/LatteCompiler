package Latte.Absyn; // Java Package generated by the BNF Converter.

import Latte.Env;
import Latte.Exceptions.TypeException;

public class FnDef extends TopDef {
    public final Type type_;
    public final String ident_;
    public final ListArg listarg_;
    public final Block block_;

    public FnDef(Type p1, String p2, ListArg p3, Block p4) { type_ = p1; ident_ = p2; listarg_ = p3; block_ = p4; }

    public <R,A> R accept(Latte.Absyn.TopDef.Visitor<R,A> v, A arg) throws Exception {
        return v.visit(this, arg);
    }


    // Function that is gathering basic infomatino about function
    @Override
    public void returnType() {
        Env.functionsReturnType.put(ident_, type_.toString());
        Env.functionsReturnType.put("readInt", "int");
        Env.functionsReturnType.put("readString", "string");
        Env.functionsReturnAchievibility.put(ident_, block_.functionsReturnAchievibility());
        Env.functionsArgumentsNumber.put(ident_, listarg_.size());
        Env.functionsArgumentsNumber.put("printInt", 1);
        Env.functionsArgumentsNumber.put("readString", 0);
        Env.functionsArgumentsNumber.put("printString", 1);
        Env.functionsArgumentsNumber.put("concatenateString", 2);
        Env.functionsArgumentsNumber.put("readInt", 0);

    }

    @Override
    public void checkTypes(Env env) throws TypeException {

        for (Arg arg: listarg_){
            arg.checkTypes(env, ident_);
        }
        block_.checkTypes(env, ident_);

    }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o instanceof Latte.Absyn.FnDef) {
            Latte.Absyn.FnDef x = (Latte.Absyn.FnDef)o;
            return this.type_.equals(x.type_) && this.ident_.equals(x.ident_) && this.listarg_.equals(x.listarg_) && this.block_.equals(x.block_);
        }
        return false;
    }

    public String toString(){
        return "; Definicja funkcji: "+type_ + " " + ident_ + " " + listarg_ + " " + block_;
    }

    public int hashCode() {
        return 37*(37*(37*(this.type_.hashCode())+this.ident_.hashCode())+this.listarg_.hashCode())+this.block_.hashCode();
    }


}
