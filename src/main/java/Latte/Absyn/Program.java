package Latte.Absyn; // Java Package generated by the BNF Converter.

import Latte.Env;
import Latte.Exceptions.TypeException;

import java.util.LinkedList;

public class Program {
    public final ListTopDef listtopdef_;

    public Program(ListTopDef p1) { listtopdef_ = p1; }

    public <S,E> S accept(Latte.Absyn.Program.Visitor<S, E> programVisitor, E env) {
        ListArg listArg = new ListArg();
        listArg.add(new Arg(new Int(), "number"));
        listtopdef_.add(new FnDef(new Int(), "printInt", listArg, new Block(new ListStmt())));
        return programVisitor.visit(this, env);
    }

    public boolean equals(Object o) {
        if (this == o) return true;
        if (o instanceof Latte.Absyn.Program) {
            Latte.Absyn.Program x = (Latte.Absyn.Program)o;
            return this.listtopdef_.equals(x.listtopdef_);
        }
        return false;
    }

    public int hashCode() {
        return this.listtopdef_.hashCode();
    }

    public void functionsRetType() throws TypeException {
        for(TopDef ltd: listtopdef_){
            ltd.returnType();
        }
        for (String key: Env.functionsReturnAchievibility.keySet()){
            if (Env.functionsReturnType.get(key) != "void")
                if (Env.functionsReturnAchievibility.get(key) == false)
                    throw new TypeException(key, "return statement in " + key + " function " +
                            "is not achievable.");
        }

    }

    public void checkTypes(LinkedList<Env> envs) throws TypeException {
        for(TopDef ltd: listtopdef_){
            ltd.checkTypes(envs);
        }
    }

    public interface Visitor <R,A> {
        public R visit(Latte.Absyn.Program p, A arg);

    }

}
